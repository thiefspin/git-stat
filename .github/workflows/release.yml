name: Release

on:
  push:
    tags: ["v*"]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Is this a pre-release?"
        required: false
        type: boolean
        default: false

env:
  CFLAGS: "-Wall -Wextra -O2 -std=c17"

jobs:
  # Validate release
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi

          # Remove 'v' prefix if present
          CLEAN_VERSION=${VERSION#v}

          echo "version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION} (${CLEAN_VERSION})"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$'; then
            echo "Error: Version must be in format X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi

      - name: Check if version exists in CHANGELOG
        run: |
          if [ -f "CHANGELOG.md" ]; then
            if ! grep -q "${{ steps.version.outputs.version }}" CHANGELOG.md; then
              echo "Warning: Version ${{ steps.version.outputs.version }} not found in CHANGELOG.md"
            fi
          fi

      - name: Update version in source files
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Update version.h if it exists
          if [ -f "src/version.h" ]; then
            sed -i "s/#define VERSION \".*\"/#define VERSION \"$VERSION\"/" src/version.h
            sed -i "s/#define VERSION_MAJOR [0-9]*/#define VERSION_MAJOR $(echo $VERSION | cut -d. -f1)/" src/version.h
            sed -i "s/#define VERSION_MINOR [0-9]*/#define VERSION_MINOR $(echo $VERSION | cut -d. -f2)/" src/version.h
            sed -i "s/#define VERSION_PATCH [0-9]*/#define VERSION_PATCH $(echo $VERSION | cut -d. -f3 | cut -d- -f1)/" src/version.h

            echo "Updated src/version.h:"
            cat src/version.h
          fi

      - name: Upload updated source
        uses: actions/upload-artifact@v4
        with:
          name: updated-source
          path: |
            src/
            Makefile
            README.md
            LICENSE
            *.md

  # Build for all platforms
  build-linux:
    name: Build Linux
    needs: validate-release
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        compiler: [gcc, clang]
        include:
          - arch: x86_64
            runner: ubuntu-latest
          - arch: aarch64
            runner: ubuntu-latest

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download updated source
        uses: actions/download-artifact@v4
        with:
          name: updated-source
          path: .

      - name: Setup cross-compilation for ARM64
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "TARGET_ARCH=aarch64" >> $GITHUB_ENV

      - name: Setup native compilation
        if: matrix.arch == 'x86_64'
        run: |
          echo "CC=${{ matrix.compiler }}" >> $GITHUB_ENV
          echo "TARGET_ARCH=x86_64" >> $GITHUB_ENV

      - name: Setup Ubuntu environment and install dependencies
        uses: ./.github/actions/setup-ubuntu
        with:
          packages: build-essential git

      - name: Build
        run: |
          make clean
          make CC=${{ env.CC }} CFLAGS="${{ env.CFLAGS }}"

          # Verify the binary
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            ./git-stat --help
          fi

      - name: Create archive
        run: |
          BINARY_NAME="git-stat-${{ needs.validate-release.outputs.version }}-linux-${{ matrix.arch }}-${{ matrix.compiler }}"
          mkdir -p release/${BINARY_NAME}
          cp git-stat release/${BINARY_NAME}/
          cp README.md LICENSE release/${BINARY_NAME}/

          cd release
          tar -czf ${BINARY_NAME}.tar.gz ${BINARY_NAME}/
          sha256sum ${BINARY_NAME}.tar.gz > ${BINARY_NAME}.tar.gz.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-${{ matrix.compiler }}
          path: release/*.tar.gz*

  build-macos:
    name: Build macOS
    needs: validate-release
    strategy:
      matrix:
        arch: [x86_64, arm64]
        include:
          - arch: x86_64
            runner: macos-12
            target: x86_64-apple-macos10.12
          - arch: arm64
            runner: macos-14
            target: arm64-apple-macos11.0

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download updated source
        uses: actions/download-artifact@v4
        with:
          name: updated-source
          path: .

      - name: Build
        run: |
          make clean
          make CC=clang CFLAGS="${{ env.CFLAGS }} -target ${{ matrix.target }}"

          # Test the binary
          ./git-stat --help

      - name: Create archive
        run: |
          BINARY_NAME="git-stat-${{ needs.validate-release.outputs.version }}-macos-${{ matrix.arch }}"
          mkdir -p release/${BINARY_NAME}
          cp git-stat release/${BINARY_NAME}/
          cp README.md LICENSE release/${BINARY_NAME}/

          cd release
          tar -czf ${BINARY_NAME}.tar.gz ${BINARY_NAME}/
          shasum -a 256 ${BINARY_NAME}.tar.gz > ${BINARY_NAME}.tar.gz.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: release/*.tar.gz*

  build-windows:
    name: Build Windows
    needs: validate-release
    runs-on: windows-latest

    strategy:
      matrix:
        arch: [x64, x86]
        include:
          - arch: x64
            msystem: MINGW64
            package-prefix: mingw-w64-x86_64
          - arch: x86
            msystem: MINGW32
            package-prefix: mingw-w64-i686

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download updated source
        uses: actions/download-artifact@v4
        with:
          name: updated-source
          path: .

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            ${{ matrix.package-prefix }}-gcc
            zip
            git

      - name: Build
        shell: msys2 {0}
        run: |
          gcc ${{ env.CFLAGS }} -o git-stat.exe src/main.c src/git_stats.c src/analysis/hotspots.c src/analysis/activity.c src/output/human_output.c src/output/json_output.c src/utils/string_utils.c src/utils/git_commands.c -lm

          # Test the binary
          ./git-stat.exe --help

      - name: Create archive
        shell: msys2 {0}
        run: |
          BINARY_NAME="git-stat-${{ needs.validate-release.outputs.version }}-windows-${{ matrix.arch }}"
          mkdir -p release/${BINARY_NAME}
          cp git-stat.exe release/${BINARY_NAME}/
          cp README.md LICENSE release/${BINARY_NAME}/

          cd release
          zip -r ${BINARY_NAME}.zip ${BINARY_NAME}/
          sha256sum ${BINARY_NAME}.zip > ${BINARY_NAME}.zip.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}
          path: release/*

  # Build source distribution
  build-source:
    name: Build Source Distribution
    needs: validate-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download updated source
        uses: actions/download-artifact@v4
        with:
          name: updated-source
          path: .

      - name: Create source tarball
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Create clean source directory
          mkdir -p git-stat-${VERSION}

          # Copy source files
          cp -r src/ git-stat-${VERSION}/
          cp Makefile README.md LICENSE *.md git-stat-${VERSION}/
          cp install.sh git-stat-${VERSION}/ 2>/dev/null || true

          # Create tarball
          tar --exclude='.git*' --exclude='*.o' --exclude='git-stat' \
              -czf git-stat-${VERSION}.tar.gz git-stat-${VERSION}/

          # Create checksums
          sha256sum git-stat-${VERSION}.tar.gz > git-stat-${VERSION}.tar.gz.sha256

          # Also create a zip for Windows users
          zip -r git-stat-${VERSION}.zip git-stat-${VERSION}/
          sha256sum git-stat-${VERSION}.zip > git-stat-${VERSION}.zip.sha256

      - name: Upload source artifacts
        uses: actions/upload-artifact@v4
        with:
          name: source-distribution
          path: |
            git-stat-*.tar.gz*
            git-stat-*.zip*

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    if: github.event_name != 'release'
    needs:
      [validate-release, build-linux, build-macos, build-windows, build-source]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Organize release assets
        run: |
          mkdir -p release-assets

          # Copy all build artifacts
          find artifacts/ -name "*.tar.gz" -o -name "*.zip" | while read file; do
            cp "$file" release-assets/
          done

          # Copy all checksums
          find artifacts/ -name "*.sha256" | while read file; do
            cp "$file" release-assets/
          done

          # Create combined checksums file
          cd release-assets
          cat *.sha256 > checksums.txt

          ls -la

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          cat > release_notes.md << 'EOF'
          ## Git Statistics Utility v${VERSION}

          A lightweight, fast C utility for comprehensive git repository analysis.

          ### 🚀 Installation

          **Quick Install (Linux/macOS):**
          ```bash
          # Download for your platform
          curl -L "https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-release.outputs.tag }}/git-stat-${VERSION}-linux-x86_64-gcc.tar.gz" | tar -xz
          sudo mv git-stat-${VERSION}-linux-x86_64-gcc/git-stat /usr/local/bin/
          ```

          **From Source:**
          ```bash
          curl -L "https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-release.outputs.tag }}/git-stat-${VERSION}.tar.gz" | tar -xz
          cd git-stat-${VERSION}
          make && sudo make install
          ```

          ### 📦 Available Downloads

          Choose the binary for your platform:

          **Linux:**
          - `git-stat-${VERSION}-linux-x86_64-gcc.tar.gz` - Linux x64 (GCC)
          - `git-stat-${VERSION}-linux-x86_64-clang.tar.gz` - Linux x64 (Clang)
          - `git-stat-${VERSION}-linux-aarch64-gcc.tar.gz` - Linux ARM64

          **macOS:**
          - `git-stat-${VERSION}-macos-x86_64.tar.gz` - macOS Intel
          - `git-stat-${VERSION}-macos-arm64.tar.gz` - macOS Apple Silicon

          **Windows:**
          - `git-stat-${VERSION}-windows-x64.zip` - Windows 64-bit
          - `git-stat-${VERSION}-windows-x86.zip` - Windows 32-bit

          **Source:**
          - `git-stat-${VERSION}.tar.gz` - Source code (Unix)
          - `git-stat-${VERSION}.zip` - Source code (Windows)

          ### ✨ Features

          - 📊 Repository overview (commits, authors, branches, files)
          - 👥 Contributor analysis with line change statistics
          - 🔥 Hotspot detection for high-churn files
          - 📈 Author activity analysis over time
          - 📁 File type breakdown with percentages
          - 🎯 JSON output for automation
          - ⚡ Fast analysis of large repositories
          - 🔒 Works entirely offline

          ### 🔧 Usage

          ```bash
          git-stat                    # Basic analysis
          git-stat --hotspots         # Include hotspot analysis
          git-stat --activity         # Include activity analysis
          git-stat --output json      # JSON output format
          git-stat --help             # Show all options
          ```

          ### 🛡️ Verification

          All binaries are built automatically using GitHub Actions. Verify downloads using the checksums in `checksums.txt`.

          ```bash
          # Verify download
          sha256sum -c checksums.txt
          ```

          ### 📋 System Requirements

          - Git installed and accessible from command line
          - Any git repository (local analysis only)
          - Linux, macOS, or Windows

          ### 🐛 Known Issues

          - Large repositories (>1M commits) may take longer to analyze
          - Windows binary requires Git for Windows or WSL for best compatibility

          ---

          **Full Changelog:** https://github.com/${{ github.repository }}/compare/v${{ needs.validate-release.outputs.version }}...HEAD
          EOF

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if release already exists
          if gh release view ${{ needs.validate-release.outputs.tag }} >/dev/null 2>&1; then
            echo "Release ${{ needs.validate-release.outputs.tag }} already exists, deleting it first"
            gh release delete ${{ needs.validate-release.outputs.tag }} --yes || true
          fi

          # Create the release
          PRERELEASE_FLAG=""
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi

          gh release create ${{ needs.validate-release.outputs.tag }} \
            --title "Git Statistics Utility ${{ needs.validate-release.outputs.tag }}" \
            --notes-file release_notes.md \
            $PRERELEASE_FLAG \
            release-assets/*

  # Update existing release if triggered by release event
  update-release:
    name: Update Release Assets
    if: github.event_name == 'release'
    needs:
      [validate-release, build-linux, build-macos, build-windows, build-source]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Organize release assets
        run: |
          mkdir -p release-assets

          # Copy all build artifacts
          find artifacts/ -name "*.tar.gz" -o -name "*.zip" | while read file; do
            cp "$file" release-assets/
          done

          # Copy all checksums
          find artifacts/ -name "*.sha256" | while read file; do
            cp "$file" release-assets/
          done

          # Create combined checksums file
          cd release-assets
          cat *.sha256 > checksums.txt

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload additional assets to existing release
          gh release upload ${{ github.event.release.tag_name }} release-assets/*

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    needs: [validate-release, create-release]
    if: always() && (needs.create-release.result == 'success' || github.event_name == 'release')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update development version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Bump to next development version
          IFS='.' read -r major minor patch <<< "$VERSION"
          NEXT_VERSION="$major.$minor.$((patch + 1))-dev"

          if [ -f "src/version.h" ]; then
            sed -i "s/#define VERSION \".*\"/#define VERSION \"$NEXT_VERSION\"/" src/version.h
            echo "Updated version to $NEXT_VERSION for development"
          fi

      - name: Create development branch if needed
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Check if we should create a release branch for hotfixes
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.0$ ]]; then
            BRANCH_NAME="release/v$VERSION"
            git checkout -b "$BRANCH_NAME"
            git push origin "$BRANCH_NAME"
            echo "Created release branch: $BRANCH_NAME"
          fi

      - name: Notify success
        run: |
          echo "✅ Release ${{ needs.validate-release.outputs.tag }} completed successfully!"
          echo "📦 Assets uploaded to GitHub Releases"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.tag }}"
